# bot/services/orders.py

import aiohttp
from aiogram import types
from aiogram.fsm.context import FSMContext
from bot.states.order_states import SomeOrderStates

API_URL = "http://127.0.0.1:8000/api/bot/orders/"
USER_API_URL = "http://127.0.0.1:8000/api/bot/users/"

ALIVE_STATUSES = ['pending', 'accepted']  # –ü—Ä–∏–º–µ—Ä —Å—Ç–∞—Ç—É—Å–æ–≤ –¥–ª—è "–∂–∏–≤—ã—Ö" –∑–∞–∫–∞–∑–æ–≤

async def start_orders_view(message: types.Message, state: FSMContext):
    telegram_id = message.from_user.id

    print(f"–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å id: {telegram_id}")

    async with aiohttp.ClientSession() as session:
        async with session.get(f"{USER_API_URL}{telegram_id}/") as response:
            if response.status == 200:
                user = await response.json()
                if "id" not in user:
                    await message.answer("–í—ã –Ω–µ –ø—Ä–∏–≤—è–∑–∞–ª–∏ —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /profile –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏.")
                    return
            else:
                await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è. –°—Ç–∞—Ç—É—Å: {response.status}")
                return

        async with session.get(f"{API_URL}?user_id={telegram_id}") as response:
            if response.status == 200:
                try:
                    orders = await response.json()
                except aiohttp.ContentTypeError:
                    html_text = await response.text()
                    print(f"–ü–æ–ª—É—á–µ–Ω –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π HTML: {html_text}")
                    await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤, —Å–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç.")
                    return

                # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∑–∞–∫–∞–∑–æ–≤ –ø–æ —Å—Ç–∞—Ç—É—Å—É
                active_orders = [order for order in orders if order['status'] in ALIVE_STATUSES]

                if not active_orders:
                    await message.answer("–£ –≤–∞—Å –Ω–µ—Ç —Ç–µ–∫—É—â–∏—Ö –∑–∞–∫–∞–∑–æ–≤.")
                    return

                buttons = [types.KeyboardButton(text=f"üì¶ –ó–∞–∫–∞–∑ #{order['id']}") for order in active_orders]
                markup = types.ReplyKeyboardMarkup(keyboard=[buttons], resize_keyboard=True)

                await state.update_data(orders=active_orders)
                await state.set_state(SomeOrderStates.viewing)

                await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:", reply_markup=markup)
            else:
                error_text = await response.text()  # –£–∑–Ω–∞—Ç—å, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –≤–µ—Ä–Ω—É–ª —Å–µ—Ä–≤–µ—Ä
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤. –°—Ç–∞—Ç—É—Å: {response.status}, –û—Ç–≤–µ—Ç: {error_text}")
                await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤. –°—Ç–∞—Ç—É—Å: {response.status}")


