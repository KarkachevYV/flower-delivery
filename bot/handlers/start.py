# bot/handlers/start.py
from aiogram import Router, types, Dispatcher
from aiogram.filters import Command
import aiohttp
import requests

router = Router()

API_URL = "http://127.0.0.1:8000/api/bot/users/"

async def get_or_create_user(telegram_id, username, first_name, last_name):
    """–§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ, –∏ —Å–æ–∑–¥–∞—ë—Ç, –µ—Å–ª–∏ –Ω–µ—Ç"""
    async with aiohttp.ClientSession() as session:
        async with session.get(f"{API_URL}{telegram_id}/") as response:
            if response.status == 200:
                return await response.json()  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –µ—Å—Ç—å

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç, —Å–æ–∑–¥–∞—ë–º
        user_data = {
            "telegram_id": telegram_id,
            "username": username,
            "first_name": first_name,
            "last_name": last_name
        }
        async with session.post(API_URL, json=user_data) as response:
            return await response.json()

@router.message(Command("start"))  
async def start_handler(message: types.Message):
    user = message.from_user
    first_name = user.first_name or "–¥—Ä—É–≥"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ë–î
    api_url = f"{API_URL}{user.id}/"
    print(f"–ó–∞–ø—Ä–∞—à–∏–≤–∞—é API: {api_url}")

    try:
        response = requests.get(api_url)
        print("–û—Ç–≤–µ—Ç –æ—Ç API:", response.status_code, response.text)  # –õ–æ–≥–∏—Ä—É–µ–º

        if response.status_code == 200:
            db_user = response.json()
            first_name = db_user.get("first_name", first_name)
        else:
            print("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–≥–æ...")

            new_user = {
                "telegram_id": user.id,
                "username": user.username or f"user_{user.id}",
                "first_name": user.first_name or "",
                "last_name": user.last_name or ""
            }

            post_response = requests.post(API_URL, json=new_user)
            print("–û—Ç–≤–µ—Ç –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ:", post_response.status_code, post_response.text)  # –õ–æ–≥

            if post_response.status_code == 201:
                first_name = new_user["first_name"]

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API: {e}")

    # üëâ –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Å –∑–∞–ø—Ä–æ—Å–æ–º –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text="üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True)]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )

    await message.answer(
        f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {first_name}! üéâ\n\n"
        "–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:",
        reply_markup=keyboard
    )