# bot/handlers/profile.py

from aiogram import Router
from aiogram.filters import Command
from aiogram.types import Message
from aiogram.fsm.context import FSMContext

from bot.services.orders import start_orders_view
from bot.services.users import get_user_data

import aiohttp

router = Router()

@router.message(Command("profile"))
async def profile_handler(message: Message, state: FSMContext):
    telegram_id = message.from_user.id
    user_data = await get_user_data(telegram_id)

    if user_data:
        profile_text = (
            f"üë§ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_data.get('user_username', '–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')}:\n"
            f"–ò–º—è: {user_data.get('user_first_name', '‚Äî')} {user_data.get('user_last_name', '')}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {user_data.get('phone_number', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
            f"Email: {user_data.get('user_email', '–ù–µ —É–∫–∞–∑–∞–Ω')}"
        )
        await message.answer(profile_text)

        # ‚ûï –û–±–Ω–æ–≤–∏–º telegram_id –≤ CustomUser (–µ—Å–ª–∏ user_id –µ—Å—Ç—å, –Ω–æ telegram_id –Ω–µ—Ç)
        if user_data.get("phone_number") and user_data.get("user"):
            await update_telegram_id_in_customuser(user_data["user"], telegram_id)

            await message.answer("üì¶ –ü–µ—Ä–µ—Ö–æ–∂—É –∫ —Å–ø–∏—Å–∫—É –≤–∞—à–∏—Ö –∑–∞–∫–∞–∑–æ–≤...")
            await start_orders_view(message, state)
    else:
        await message.answer("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–π–¥–∏—Ç–µ /start –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∑–∂–µ.")

# üîß –û—Ç–¥–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è telegram_id
async def update_telegram_id_in_customuser(user_id: int, telegram_id: int):
    url = f"http://127.0.0.1:8000/api/bot/users/{user_id}/"
    try:
        async with aiohttp.ClientSession() as session:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
            async with session.get(url) as resp:
                if resp.status == 200:
                    user_data = await resp.json()

                    # –ï—Å–ª–∏ telegram_id —É–∂–µ –µ—Å—Ç—å ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
                    if user_data.get("telegram_id"):
                        return
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    user_data["telegram_id"] = str(telegram_id)
                    async with session.put(url, json=user_data) as update_resp:
                        if update_resp.status == 200:
                            print(f"[INFO] Telegram ID –¥–æ–±–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é #{user_id}")
                        else:
                            print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å telegram_id: {await update_resp.text()}")
    except Exception as e:
        print(f"[EXCEPTION] {e}")


# @router.message(Command("edit_profile"))
# async def edit_profile_handler(message: types.Message):
#     telegram_id = message.from_user.id
#     user_data = await get_user_data(telegram_id)

#     # –ï—Å–ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É–∂–µ –µ—Å—Ç—å, –Ω–µ –ø—Ä–æ—Å–∏–º –ø–æ–≤—Ç–æ—Ä–Ω–æ
#     if user_data and user_data.get("phone_number"):
#         await message.answer("üìû –¢–µ–ª–µ—Ñ–æ–Ω —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω.")
#     else:
#         await message.answer(
#             "üì≤ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É ¬´–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç¬ª."
#         )


# def normalize_phone(phone: str) -> str:
#     normalized = phone.replace(" ", "").replace("-", "")
#     if normalized.startswith("8"):
#         return "+7" + normalized[1:]
#     if normalized.startswith("7"):
#         return "+7" + normalized[1:]
#     if normalized.startswith("9"):
#         return "+7" + normalized
#     return normalized


# async def update_phone_number(telegram_id: int, phone_number: str):
#     url = f"{API_BASE}/link_phone/"
#     payload = {"telegram_id": telegram_id, "phone_number": phone_number}
#     async with aiohttp.ClientSession() as session:
#         async with session.post(url, json=payload) as resp:
#             return resp.status == 200

# @router.message(lambda m: isinstance(m.contact, Contact))
# async def update_phone_handler(message: types.Message):
#     contact = message.contact
#     telegram_id = message.from_user.id
#     phone_number = normalize_phone(contact.phone_number)

#     success = await update_phone_number(telegram_id, phone_number)

#     if success:
#         await message.answer("‚úÖ –¢–µ–ª–µ—Ñ–æ–Ω –æ–±–Ω–æ–≤–ª—ë–Ω –∏ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∞–∫–∫–∞—É–Ω—Ç—É!")
#     else:
#         await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–≤—è–∑–∞—Ç—å –Ω–æ–º–µ—Ä. –í–æ–∑–º–æ–∂–Ω–æ, —Ç–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–∞–π—Ç–µ.")


