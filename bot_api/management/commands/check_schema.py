# bot_api/management/commands/check_schema.py
from django.core.management.base import BaseCommand
from django.db import connection


class Command(BaseCommand):
    help = '–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –Ω—É–∂–Ω—ã—Ö –ø–æ–ª–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ bot_api_botuser'

    def handle(self, *args, **options):
        table_name = 'bot_api_botuser'
        expected_fields = ['id', 'telegram_id', 'username', 'first_name', 'last_name', 'created_at', 'phone_number']

        self.stdout.write(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü—ã '{table_name}'...")

        with connection.cursor() as cursor:
            cursor.execute(f"PRAGMA table_info({table_name});")
            columns = [row[1] for row in cursor.fetchall()]

        missing = set(expected_fields) - set(columns)

        for col in expected_fields:
            if col in columns:
                self.stdout.write(self.style.SUCCESS(f"‚úî –ü–æ–ª–µ '{col}' –Ω–∞–π–¥–µ–Ω–æ"))
            else:
                self.stdout.write(self.style.ERROR(f"‚ùå –ü–æ–ª–µ '{col}' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"))

        if missing:
            self.stdout.write(self.style.WARNING("\n‚ö† –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—è!"))
        else:
            self.stdout.write(self.style.SUCCESS("\n‚úÖ –í—Å–µ –Ω—É–∂–Ω—ã–µ –ø–æ–ª—è –Ω–∞ –º–µ—Å—Ç–µ."))
